#!/bin/bash
Invocation="$(printf %q "$BASH_SOURCE")$((($#)) && printf ' %q' "$@")"
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
FaST_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && cd -- ../ &> /dev/null && pwd)

show_help() {
	cat $SCRIPT_DIR/help
	}
	
while getopts "hs:1:2:n:j:c:m:t:K:p:fB:IMPS" opt; do
    case "$opt" in
    h)  show_help
        exit 0
        ;;
    1)  R1file=$OPTARG ## R1.fastq.gz file
        ;;   
    2)  R2file=$OPTARG  ## R2.fastq.gz file
        ;;
    f)  force=1 ## whether to force repeating alignment and dge steps. if not set, provided that the aligned data are already there, FaST will only repeat the segmentation step
        ;;    
    j)  jobs=$OPTARG  ## number of threads for STAR
        ;;
    K)  KD=$OPTARG  ## kernel density for cell segmentation (best results obtained with 3). Must be an odd number.
        ;;
    m)  apex=$OPTARG ## method to choose nuclearly localized transcripts
        ;;
    n)  sample=$OPTARG  ## name for sample to be analysed (a folder with that name for output will be created, if non existing)
        ;;
    p)  protocol=$OPTARG ## protocol: currently Illumina (default) or Stereo-seq
        ;;
    r)  tile_ratio=$OPTARG ## ratio to keep a tile in the analysis (default: 0.1)
        ;;
    s)  species=$OPTARG ## currently either human or mouse
        ;;
    t)  tiles=$OPTARG ## directory containing barcode map (one file per tile + one .idx file per tile)
        ;;
    B)  BINSIZE=$OPTARG ## binsize to use in segmentation to segment area based on density
        ;;
    I)  INTERGENIC=2 ## (only applies for segmentation) use the signal from reads mapped to integenic regions (DNA???)
        ;;
    M)  MULTI=2 ## (only for applies to segmentation) use multimapping reads
        ;;
    P)  PSEUDO=1 ## whether to remove pseudogenes in annotation. Keeping pseudogenes implies loss of ~ 10% of reads because they match a gene + a corresponding pseudogene.
        ;;    
    S)  segment=1 ## whther segmentation should be performed or not
        ;;
    esac
done


if [ -z "$protocol" ]; then
    protocol="Illumina"
fi

if [ -z "$INTERGENIC" ]; then
    INTERGENIC="1"
fi

if [ -z "$MULTI" ]; then
    MULTI="1"
fi

if [ -z "$PSEUDO" ]; then
    PSEUDO="0"
fi

if [ -z "$jobs" ]; then
    jobs=20
fi

if [ -z "$KD" ]; then
    KD=3
fi


if [ -z "$BINSIZE" ]; then
    BINSIZE=20
fi


if [ -z $tile_ratio ]; then
    tile_ratio="0.1"
fi



if [ -z "$apex" ]; then
    apex="apex"
fi
if [ -z	"$sample" ]; then
    echo -e "Please provide a path for output using -n option.\nExiting..."
    exit
fi

if [ -z	"$species" ]; then
    echo -e "Please provide a species (either 'human' or 'mouse' ) using -s option.\nExiting..."
    exit
fi



if [ ! -d "$FaST_DIR/reference/$species" ]; then
    echo -e "\nError. cannot find annotation data in $FaST_DIR/reference/$species directory.\nPlease run FaST-reference script with appropriate options to generate the genome annotation folder for your model organism\n"
    exit
fi

if [ ! -d $sample ]; then
    mkdir $sample
fi

if [ ! -d $sample/logs ]; then
    mkdir $sample/logs
fi

if [ ! -d $sample/dge ]; then
    mkdir $sample/dge
fi

#echo -e "Input data:\nfastq1=$R1file\nfastq2=$R2file\nworking_dir=$sample\nScript_dir=$SCRIPT_DIR\ntiles_path=$tiles\ntiles_ratio=$tile_ratio\nthreads=$jobs\nFast_dir=$FaST_DIR\nspecies=$species\nprotocol=$protocol"
TIME=`date | cut -f 4 -d ' '`

echo -e "\t\tYou are running FaST (Fast Analysis of Spatial Transcriptomics)"
echo -e "$TIME\tStarting analysis:"
echo -e "\t\tSpecies:\t\t$species"
echo -e "\t\tProtocol:\t\t$protocol"

echo -e "Commandline parameters: $Invocation \n" >> $sample/logs/run.log

if [ $PSEUDO == "1" ]; then
    perl -ne 'if ($_ !~ /(gene_type "[^"]+_pseudogene")/) { print "$_";}' $FaST_DIR/reference/$species/$species.annotation.gtf > $sample/annotation.gtf 
else
    cp $FaST_DIR/reference/$species/$species.annotation.gtf $sample/annotation.gtf
fi
TIME=`date | cut -f 4 -d ' '`
echo -e "$TIME\tPreparing reference for $species"
perl $SCRIPT_DIR/reference_preparation/exons_from_gtf_1.pl $sample $species $sample/annotation.gtf
awk '{if ($3=="gene") print}' $sample/annotation.gtf | bedtools subtract -a - -b $sample/$species.exons.bed -s | perl $SCRIPT_DIR/reference_preparation/introns_from_gtf.pl $sample $species
cat $sample/$species.introns.bed $sample/$species.exons.bed > $sample/GENE_annotation_intron_exon.bed
cat $FaST_DIR/reference/$species/$species.reference.log    >> $sample/logs/run.log 

if [ -f $sample/Aligned.bam ] && [ "$force" != "1" ]; then
    echo -e "\t\tFound aligned reads in folder $sample, skipping pre-processing and alignment steps. To repeat pre-processing and alignment, use option -f (force)."
else 
    if [ -z $tiles ]; then
        echo -e "\nError. Please provide a valid path to a folder containing tile barcodes map. You can generate it by running FaST-map. Try \n\nFaST-map -h \n\nExiting..."
        exit
    fi
    if [ -z $R1file ]; then
        echo -e "\nError. Please provide a valid path to a fastq file containing read 1 sequencing.\nExiting..."
        exit
    fi
    if [ -z $R2file ]; then
        echo -e "\nError. Please provide a valid path to a fastq file containing read 2 sequencing.\nExiting..."
        exit
    fi    
    echo -e "\t\tR1 file:\t\t$R1file\n\t\tR2 file:\t\t$R2file\n\t\tTiles folder:\t\t$tiles\n\t\tAllocated threads:\t$jobs"
    perl $SCRIPT_DIR/wrapper.pl $R1file $R2file $sample $SCRIPT_DIR $tiles $tile_ratio $jobs $FaST_DIR $species $protocol
    if [ -d $sample/star_tmp ]; then
        rm -r $sample/star_tmp
    fi
    perl $SCRIPT_DIR/split_tiles_3.pl $sample $SCRIPT_DIR $apex $protocol

    if [ $protocol == "Stereo-seq" ]; then
        cut -f 5 $sample/barcodes_per_tile.txt | cut -c 1,2 | sort -u > $sample/swaths
    fi
    COUNTS=`fgrep COUNTS $sample/logs/*tile.log | cut -f 2 | paste -sd + - | bc`
    UMI=`fgrep UMI $sample/logs/*tile.log | cut -f 2 | paste -sd + - | bc`
    SAT=`perl -e 'printf("%.2f%%", (1-($ARGV[0]/$ARGV[1]))*100);' $UMI $COUNTS`
    TIME=`date | cut -f 4 -d ' '`
    echo -e "$COUNTS reads with valid alignment and spatial mapping\n$UMI UMIs with spatial mapping\n$SAT library saturation\n" >> $sample/logs/run.log
    echo -e "$TIME\tFound $COUNTS reads with valid alignment and spatial mapping; $UMI UMIs with spatial mapping; library saturation is $SAT\n"
fi

if [ $protocol == "Illumina" ]; then
    if [ $MULTI == "1" ]; then
        if [ $INTERGENIC == "1" ]; then 
            cat  $sample/dge/*spateo.txt | fgrep -v MIDCounts  | fgrep -v Multigene | fgrep -v Intergenic | cat <( echo -e "x\ty\tgeneID\tMIDCounts\tEXONIC\tINTRONIC") - > $sample/dge/whole_dataset.txt
        else
            cat  $sample/dge/*spateo.txt | fgrep -v MIDCounts  | fgrep -v Multigene | cat <( echo -e "x\ty\tgeneID\tMIDCounts\tEXONIC\tINTRONIC") - > $sample/dge/whole_dataset.txt
        fi
    else
        if [ $INTERGENIC == "1" ]; then
            cat  $sample/dge/*spateo.txt | fgrep -v MIDCounts  | fgrep -v Intergenic | cat <( echo -e "x\ty\tgeneID\tMIDCounts\tEXONIC\tINTRONIC") - > $sample/dge/whole_dataset.txt 
        else 
            cat  $sample/dge/*spateo.txt | fgrep -v MIDCounts  | cat <( echo -e "x\ty\tgeneID\tMIDCounts\tEXONIC\tINTRONIC") - > $sample/dge/whole_dataset.txt 
        fi
    fi
    awk -v FS='\t' -v OFS='\t' '{if ($1 == "x") { print $0} else { print $1+20,$2-20,$3,$4,$5,$6}}' $sample/dge/whole_dataset.txt > $sample/dge/whole_dataset_shift.txt
else
    if [ $MULTI == "1" ]; then
        if [ $INTERGENIC == "1" ]; then 
            cat $sample/swaths | xargs -i -P 4 bash -c 'cat  $sample/dge/{}*spateo.txt | fgrep -v MIDCounts  | fgrep -v Multigene | fgrep -v Intergenic | cat <( echo -e "x\ty\tgeneID\tMIDCounts\tEXONIC\tINTRONIC") - > $sample/dge/{}_dataset.txt'
        else
            cat $sample/swaths | xargs -i -P 4 bash -c 'cat  $sample/dge/{}*spateo.txt | fgrep -v MIDCounts  | fgrep -v Multigene | cat <( echo -e "x\ty\tgeneID\tMIDCounts\tEXONIC\tINTRONIC") - > $sample/dge/{}_dataset.txt'
        fi
    else
        if [ $INTERGENIC == "1" ]; then
            cat $sample/swaths | xargs -i -P 4 bash -c 'cat  $sample/dge/{}*spateo.txt | fgrep -v MIDCounts  | fgrep -v Intergenic | cat <( echo -e "x\ty\tgeneID\tMIDCounts\tEXONIC\tINTRONIC") - > $sample/dge/{}_dataset.txt'
        else
            cat $sample/swaths | xargs -i -P 4 bash -c 'cat  $sample/dge/{}*spateo.txt | fgrep -v MIDCounts  | cat <( echo -e "x\ty\tgeneID\tMIDCounts\tEXONIC\tINTRONIC") - > $sample/dge/{}_dataset.txt'
        fi
    fi
fi
      
perl $SCRIPT_DIR/plot.pl $sample 
TIME=`date | cut -f 4 -d ' '`
if [ -z "$segment" ]; then
    echo -e "$TIME\tAlignment and DGE: done. No segmentation requested. Exiting..."
    exit;
else
    echo -e "$TIME\tRunning cell segmentation with Spateo"
fi

if [ ! -d $sample/images ]; then
    mkdir $sample/images
fi

if [ $apex == "nuc" ]; then
    Rscript --vanilla $SCRIPT_DIR/find_nuc_markers.R $sample
fi
 
if [ ! -d $sample/images/K_$KD ]; then
    mkdir $sample/images/K_$KD
fi
if [ ! -d $sample/dge/K_$KD ]; then
    mkdir $sample/dge/K_$KD
fi
echo -e "segmentation parameters:\n-kernel size for convolution: $KD\nBin size for RNA density binning: $BINSIZE" >> $sample/logs/run.log 
#cut -f 1 -d ',' $sample/tiles_info | xargs -i -P 1 bash -c "python $SCRIPT_DIR/segment_2.py $sample {} $FaST_DIR $species $apex $KD $SpateoThresh 78 2> $sample/logs/{}_segment_$KD.log"

if [ $protocol == "Illumina" ]; then
    python $SCRIPT_DIR/segment_and_analyse.py $sample $BINSIZE $KD $species 2> $sample/logs/segment_$KD.err > $sample/logs/segment_$KD.log
fi

if [ $protocol == "Stereo-seq" ]; then
    ls $sample/dge/*dataset.txt | xargs -i -P 1 bash -c "python $SCRIPT_DIR/segment_Stereo_seq.py $sample $BINSIZE NO $KD $species {} 2> $sample/logs/swath_{}_segment_$KD.err > $sample/logs/swath_{}_segment_$KD.log  "
fi
cat $sample/seg_k_${KD}_binsize_$BINSIZE/log
#else 
    #cut -f 1 -d ',' $sample/tiles_info | xargs -i -P 1 bash -c "python $SCRIPT_DIR/segment_2.py $sample {} $FaST_DIR $species $apex $KD $SpateoThresh 78 2> $sample/logs/{}_segment_$KD.log"
    #python $SCRIPT_DIR/join_slice.py  $sample $species $KD > $sample/images/K_$KD/log
TIME=`date | cut -f 4 -d ' '`

echo -e "$TIME\tSegmentation: done. Segmented .h5ad files and output of a simple automated analysis are in folder $sample/seg_k_${KD}_binsize_$BINSIZE/"





